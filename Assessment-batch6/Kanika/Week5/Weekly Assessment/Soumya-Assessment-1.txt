1. To create a maven project we will have to first open the terminal/Command Prompt and write

	"mvn archetype:generate -DgroupId=com.sapient.week1 -DartifactId=JavaFirstProject -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false"

	Here -DgroupId is the package name and DadtifactId is the project name. DarchetypeArtifactId is the type of maven project generated and DinteractiveMode tells maven that we don't 
	want to interact and to generate the project completely.

	After this we add dependencies for JUnit, JDK, etc in the POM file.

1.1. After the creation of the files, we go to the src/main and create a java class there named CheckEven. Implementation of the asked method is:
	
	public class CheckEven{

		public Boolean check(int n)
		{
			if(n%2 == 0) return true;
			return false;
		}	
	}

1.2. To test the above method, we create a JUnit test case by creating a test file. Its implementation is:

class UserDefinedTesting {

	CheckEven obj;
	Boolean actual, expected;
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
		obj = new CheckEven();
	}

	@Test
	public void Test1() {
		actual = obj.check(2);
		expected = true;
		assertEquals(expected,actual);
	}

	@Test
	public void Test2() {
		actual = obj.check(0);
		expected = true;
		assertEquals(expected,actual);
	}

	@Test
	public void Test3() {
		actual = obj.check(3);
		expected = false;
		assertEquals(expected,actual);
	}
}

1.3.,1.4.,1.5. To create a local git repository and push it to remote, The following steps are to be followed:

	a. Go into a directory and open command line/ GIT BASH
	b. Use "git init" to initialize the repository
	c. Add required files to this repository. (For our case, the maven project we did earlier)
	d. Use "git add ." to stage all folder
	e. Then, use '  git commit -m "Message"  ', to commit these changes
	f. Check the git SSH link from the remote repository and Copy it
	g. Then set the remote by using, ' git remote add origin <SSH link (copied)> 
	h. Then push the code using, ' git push - u origin master ' (any other branch if necessary)
 
1.6. The maven command and its use are:

	a. mvn compile : This command will compile all the resources (src/main) of the project. For example, in the q1 the Java code will be compiled.
	b. mvn test : This command will test all the testcases (src/test) present in the project. regarding q1, it will execute all the JUnit tests and show its output.
	c. mvn package : This command will convert the resources to a jar file. This is an executable file generally provided to clients rather than the code.
			 It is present in the target folder.

	To execute the jar file, now we will use 'java -jar target/<JavaFirstProject-1.0-SNAPSHOT>.jar '. By default a jar file is made called projectname-versionnamejar 
	in case the version name is unspecified.
	
2. To create a jenkins pipeline job and execute the q1 here, the steps are:

	a. First login to Jenkins and select "Create New Item"
	b. We have to choose a pipeline project and name our task.
	c. After this, we have to we have to create .Jenkinsfile where we can add all the commands for the pipeline.
	d. Now we add this .Jenkinsfile to the git repository.
	e. After this, we continue configuring the Jenkins and in Build Triggers choose Poll SCM and fix the time at which the pipeline should execute.
	f. For the script, we choose Pipeline script from SCM and now when pulling the code, Jenkins will read the pipeline stages from the file.
	   Alternatively, we can also write the same content in the Groovy script.
	g. After this we setup out Git details such as repository link, username, password and location of the Jenkinfile.
	h. Now the configuration is over and at the homepage we can select the job and run it.

The jenkins script is given here,

	pipeline {
    		agent any
    
    		stages {
        		stage ('Initialize') {
            			steps {
                			bat 'mvn clean install'
            			}
        		}

        		stage ('Test') {
            			steps {
                			bat 'mvn test'
            			}
        		}
			stage ('Package') {
            			steps {
                			bat 'mvn package'
            			}
        		}

			stage ('Deploy') {
            			steps {
					bat 'java -cp target/JavaFirstProject-1.0-SNAPSHOT.jar com.sapient.week1'
            			}
        		}
	

    		}
	}





 


